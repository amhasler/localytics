// Generated by CoffeeScript 1.6.1
var PlacePretty, changeArrow, getPercentChange, industry, makeBenchmarkPretty, makePrettyBig, makePrettyPercent, placeBench, prettyPlaceTimes, setIndustry, updateUS;

industry = "News";

setIndustry = function(industry) {
  return $('span.industry').html(industry);
};

prettyPlaceTimes = function(times) {
  var time;
  times = (function() {
    var _i, _len, _results;
    _results = [];
    for (_i = 0, _len = times.length; _i < _len; _i++) {
      time = times[_i];
      _results.push(time / 60);
    }
    return _results;
  })();
  times = (function() {
    var _i, _len, _results;
    _results = [];
    for (_i = 0, _len = times.length; _i < _len; _i++) {
      time = times[_i];
      _results.push(numeral(time).format('0,0.0'));
    }
    return _results;
  })();
  document.getElementById('avgtime').innerHTML = times[0] + " minutes";
  document.getElementById('mediantime').innerHTML = times[1] + " minutes";
  document.getElementById('alltime').innerHTML = times[2] + " minutes";
  return document.getElementById('industrytime').innerHTML = times[3] + " minutes";
};

changeArrow = function(change, id) {
  var thing;
  thing = "." + id;
  if (change > 0) {
    return $(thing).addClass("positive");
  } else if (change < 0) {
    return $(thing).addClass("negative");
  }
};

makePrettyBig = function(ugly) {
  var k;
  for (k in ugly) {
    ugly[k] = numeral(ugly[k]).format('0,0');
  }
  PlacePretty(ugly);
  return ugly;
};

PlacePretty = function(pretty) {
  var k;
  for (k in pretty) {
    document.getElementById(k).innerHTML = pretty[k];
  }
};

makePrettyPercent = function(ugly) {
  var k;
  for (k in ugly) {
    ugly[k] = numeral(ugly[k]).format('0,0.0');
  }
  PlacePretty(ugly);
};

makeBenchmarkPretty = function(ugly) {
  var k, string;
  for (k in ugly["All"]) {
    string = ugly["All"][k]["growth"] * 100;
    ugly["All"][k]["growth"] = numeral(string).format('0,0.0');
  }
  for (k in ugly["News"]) {
    string = ugly["News"][k]["growth"] * 100;
    ugly["News"][k]["growth"] = numeral(string).format('0,0.0');
  }
  placeBench(ugly);
  return string;
};

placeBench = function(pretty) {
  var benchId, k;
  for (k in pretty['All']) {
    benchId = "#all_" + k;
    $(benchId).text(pretty["All"][k]["growth"]);
  }
  for (k in pretty["News"]) {
    benchId = "#industry_" + k;
    $(benchId).text(pretty["News"][k]["growth"]);
  }
};

getPercentChange = function(thing) {
  var k, percChange, percentChangeSessions, percentChangeUsers;
  percentChangeSessions = ((thing[0]['sessions'] - thing[1]['sessions']) / thing[1]['sessions']) * 100;
  percentChangeUsers = ((thing[0]['users'] - thing[1]['users']) / thing[1]['users']) * 100;
  percChange = {
    userchange: percentChangeUsers,
    sessionchange: percentChangeSessions
  };
  thing.push(percChange);
  makePrettyPercent(thing[2]);
  for (k in percChange) {
    changeArrow(percChange[k], k);
  }
  return percentChangeSessions;
};

updateUS = function() {
  $.ajax({
    cache: false,
    success: function(data) {
      var bench, k, newBench, newBenches, newLocs, newTimes, newUs, otherBenches, otherLocs, times, us, v, _ref, _ref1, _ref2, _ref3;
      us = [];
      us[0] = data.values.recent;
      us[1] = data.values.past;
      newUs = [];
      newLocs = {};
      otherLocs = {};
      times = {};
      newTimes = [];
      bench = [];
      bench = data.benchmarks;
      newBench = [];
      newBenches = {};
      otherBenches = {};
      _ref = bench['All'];
      for (k in _ref) {
        v = _ref[k];
        newBenches[k] = v;
      }
      newBench.push(newBenches);
      _ref1 = bench['News'];
      for (k in _ref1) {
        v = _ref1[k];
        if (k) {
          otherBenches[k] = v;
        }
      }
      newBench.push(otherBenches);
      newTimes.push(us[0]['median session']);
      newTimes.push(us[0]['avg session']);
      newTimes.push(bench['All']["avg_session_length"]['value']);
      newTimes.push(bench['News']["avg_session_length"]['value']);
      _ref2 = us[0];
      for (k in _ref2) {
        v = _ref2[k];
        if (k === "sessions" || k === "users") {
          newLocs[k] = v;
        }
      }
      newUs.push(newLocs);
      _ref3 = us[1];
      for (k in _ref3) {
        v = _ref3[k];
        if (k === "sessions" || k === "users") {
          otherLocs[k] = v;
        }
      }
      newUs.push(otherLocs);
      makeBenchmarkPretty(bench);
      setIndustry(industry);
      prettyPlaceTimes(newTimes);
      getPercentChange(newUs);
      makePrettyBig(newUs[0]);
    },
    url: 'js/data.json'
  });
};
